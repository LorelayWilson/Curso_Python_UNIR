# ===========================================
# .gitignore para Portafolio de Proyectos Python - UNIR
# Universidad Internacional de La Rioja (UNIR)
# Máster en Inteligencia Artificial
# Curso de Programación en Python
# ===========================================

# ===========================================
# PYTHON - Archivos del Sistema
# ===========================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#poetry.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# ===========================================
# ENTORNOS DE DESARROLLO
# ===========================================

# IDEs y Editores
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store
Thumbs.db

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# ===========================================
# ARCHIVOS ESPECÍFICOS DEL PORTAFOLIO
# ===========================================

# Archivos de desarrollo interno (NO subir a Git)
*.log
*.tmp
*.bak

# Archivos de configuración local
config_local.py
.env.local
settings_local.py

# Archivos de datos temporales
*.csv.tmp
*.json.tmp
*_temp.json
*_temp.csv

# Archivos de backup
*.backup
*.old
*_backup.*

# Archivos de trabajo en progreso
*_work_in_progress.*
*_draft.*
*_incomplete.*

# ===========================================
# DOCUMENTACIÓN TEMPORAL
# ===========================================

# Archivos de trabajo en progreso
*_draft.md
*_work_in_progress.md
*_temp.md

# Archivos de notas personales
notas_personales.md
TODO_temp.md
ideas.md

# ===========================================
# SISTEMAS OPERATIVOS
# ===========================================

# Windows
*.lnk
*.exe
*.msi
*.dll
*.pyd
*.so
*.dylib

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# ===========================================
# ARCHIVOS DE PROYECTO ACADÉMICO
# ===========================================

# Archivos de evaluación (si los hay)
evaluacion_*.pdf
feedback_*.docx
calificacion_*.txt

# Archivos de presentación
presentacion_*.pptx
slides_*.pdf

# ===========================================
# NOTAS IMPORTANTES
# ===========================================

# ✅ ARCHIVOS QUE SÍ SE SUBEN A GIT:
# - README.md (archivo principal del portafolio)
# - .gitignore (este archivo de configuración)
# - trabajo_1/ (Calculadora de Promedios Escolares)
#   ├── trabajo_1_sintaxis_python.py
#   ├── DOCUMENTACION_TECNICA_TRABAJO1.md
#   ├── RESUMEN_EJECUTIVO_TRABAJO1.md
#   └── INSTRUCCIONES_RAPIDAS.md
# - trabajo_2/ (Sistema de Inventario POO)
#   ├── trabajo_2_Sistema_Inventario_POO.py
#   ├── DOCUMENTACION_TECNICA_TRABAJO2.md
#   ├── RESUMEN_EJECUTIVO_TRABAJO2.md
#   └── INSTRUCCIONES_RAPIDAS.md
# - requirements.txt (si se crea para dependencias)
# - trabajo_X/ (futuros trabajos del curso)

# ❌ ARCHIVOS QUE NO SE SUBEN A GIT:
# - Archivos temporales y de desarrollo
# - Entornos virtuales
# - Archivos de configuración local
# - Logs y archivos de sistema
# - Archivos de registro interno de cambios
# - Archivos de evaluación y feedback personal

# ===========================================
# FIN DEL ARCHIVO .gitignore
# ===========================================
# 
# Este archivo está diseñado para gestionar todo el portafolio
# de proyectos académicos del curso de Programación en Python.
# Se actualizará automáticamente conforme se añadan nuevos trabajos.
